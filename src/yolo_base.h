/*
* 免责声明：
* 本软件是开源程序，您可以自由使用、修改和发布它，使用 GNU 通用公共许可证版本 2（GPLv2）的条款。
* 请注意，在根据GPLv2发布本软件之前，您必须遵守以下条款：
* 1. 任何修改和派生作品必须同样采用GPLv2，并在您的派生作品中提供GPLv2的完整文本。
* 2. 您必须保留原始代码的版权通告，并在您的项目中明确指明原始作者和软件的来源。
* 3. 如果您分发本软件，您必须提供完整的源代码，以满足GPLv2的要求。这包括您的修改和派生作品的源代码。
* 4. 本软件是按"原样"提供的，不附带任何明示或暗示的保证。作者对于使用本软件造成的任何直接、间接、偶发、特殊、典型或惩戒性损害不承担责任。
* 使用此代码即表示您同意遵守GPLv2的所有要求和免责声明的条件。
* 请仔细阅读GNU通用公共许可证版本2以了解更多详细信息。您可以在 http ://www.gnu.org/licenses/gpl-2.0.html 上找到GPLv2的完整文本。
* [作者姓名]: bilibili：随风而息
* [地址]:https://github.com/AMXZzzz/SF_TRT_62.git
* [日期]: 2023/10/26
*/
#pragma once
#include <vector>
#include <windows.h>
#include <opencv2/opencv.hpp>
#include "base_type.h"

#define CENTER_COORDINATE  0	//! 使用中心点为坐标


//! yolo类型的命名空间
namespace sf {
	namespace Type {
		enum YoloType :int {
			TYPE_UNKONE = 0,	//! 空类型
			TYPE_YOLOV5 = 1,	//! yolov5 兼容 yolov7
			TYPE_YOLOV8 = 2,
			TYPE_YOLOX = 3,
		};
	}
}

class YOLO {
public:

	YOLO(float* conf, float* iou, Process* process);

	// --------------------------- 获取信息API --------------------------- // 
	//! 获取yolo类型类型
	virtual sf::Type::YoloType getYoloType();

	//! 获取置信度的指针
	virtual	float* getConfidencePtr();

	//! 获取iou的指针
	virtual	float* getIOUPtr();

	//! 获取归一化的值
	virtual	const float getNormalized();

	//! 获取输入层的维度
	virtual	std::vector<int64_t> getInputDims();

	//! 获取输入层的维度
	virtual	std::vector<int64_t> getOutputDims();

	//! 获取输入节点的名称，二级指针
	virtual	const char** getInputName();

	//! 获取输出节点的名称，二级指针
	virtual	const char** getOutputName();

	//! 获取输入图片的size
	virtual const cv::Size getImageSize();

	// --------------------------- 设置信息API --------------------------- // 
	//! 初始化设置输入维度
	virtual void setInputDims(std::vector<int64_t>& input);

	//! 设置输出维度
	virtual void setOutputDims(std::vector<int64_t>& output);

	//! 验证维度是否正确
	virtual bool dims_error(int64_t dim1, int64_t dim2);

	//! 对输出进行解码
	virtual void DecodeOutput(float* output) = 0;

	//! 释放函数
	virtual void Release() = 0;

	//! 释放父类指针指向的对象
	//! 若没有虚析构,则只会释放父类本身内存
	//! 出现无法释放派生类的内存
	virtual ~YOLO();

protected:

	const char* input_name[1] = { "images" };
	const char* output_name[1] = { "output" };

	float* m_conf = nullptr;
	float* m_iou = nullptr;
	Process* m_process = nullptr;

	float normalized = 1.f / 255.f;
	std::vector<int64_t> m_input_dims = {};
	std::vector<int64_t> m_output_dims = {};

private:
	YOLO();
};


//工厂函数，用于创建对象
//! 需要填充该结构体
struct YOLOINFO {
	sf::Type::YoloType type;
	float* conf;
	float* iou;
	Process* process;
};

namespace sf {
	YOLO* createYoloObject(YOLOINFO* info);
}

